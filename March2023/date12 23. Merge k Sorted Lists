/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length==0|| lists==null)
            return null;
        return helper(lists, 0, lists.length-1);
    }
    //TC = klogk
    private ListNode helper(ListNode[] lists, int low, int high){
        if(low>high)
            return null;
        else if(low==high)
            return lists[low];
        else{
            int mid = low + (high-low)/2;
            ListNode left = helper(lists, low, mid);
            ListNode right = helper(lists, mid+1, high);
            return merge(left, right);
        }
    }
    //tc=O(a+b)
    private ListNode merge(ListNode a, ListNode b){
        if(a==null)
            return b;
        if(b==null)
            return a;
        ListNode dummy = new ListNode(-1);
        ListNode t = dummy;
        ListNode t1 = a;
        ListNode t2 = b;
        while(t1!=null && t2!=null){
            if(t1.val<t2.val){
                t.next = t1;
                t1=t1.next;
                t=t.next;
            }
            else{
                t.next = t2;
                t2=t2.next;
                t=t.next;
            }
        }
        while(t1!=null){
            t.next = t1;
            t1=t1.next;
            t=t.next;
        }
        while(t2!=null){
            t.next = t2;
            t2=t2.next;
            t=t.next;
        }
        return dummy.next;    
    }
}
