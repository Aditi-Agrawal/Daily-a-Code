Time complexity: O(N\log N)O(NlogN).
We create sortedTasks, which is a deep copy of the tasks array. This takes O(N)O(N) time.
Sorting the sortedTasks array takes O(N \log N)O(NlogN) time.
We push and pop each task once in the min-heap, and both the operations take O(\log N)O(logN) time for each element. Thus, it takes O(N \log N)O(NlogN) time in total.
Thus, overall time complexity is, O(N + N \log N + N \log N) \approx O(N \log N)O(N+NlogN+NlogN)≈O(NlogN).


Space complexity: O(N)O(N).
Our sortedTasks array will store all NN tasks, and the min-heap will also contain at most NN tasks.
Thus, we use O(N + N) \approx O(N)O(N+N)≈O(N) extra space.


Solution

class Solution {
    public int[] getOrder(int[][] tasks) {
        //sort based on min task processing or min task index
        PriorityQueue<int[]> nextTask = new PriorityQueue<int[]>((a,b) -> (a[1]!=b[1] ? (a[1]-b[1]) : (a[2]-b[2])));
        //store task enqueue time, processing time, index
        int sortedTasks[][] = new int[tasks.length][3];
        for(int i=0;i<tasks.length; i++){
            sortedTasks[i][0] = tasks[i][0];
            sortedTasks[i][1] = tasks[i][1];
            sortedTasks[i][2] = i;
        }
        Arrays.sort(sortedTasks, (a,b) -> Integer.compare(a[0], b[0]));
        
        int tasksProcessingOrder[] = new int[tasks.length];
        
        long currTime = 0;
        int taskIndex = 0;
        int ansIndex = 0;
        
        //stop when no tasks are left in array and heap
        while(taskIndex<tasks.length || !nextTask.isEmpty()){
            if(nextTask.isEmpty() && currTime < sortedTasks[taskIndex][0]){
                currTime = sortedTasks[taskIndex][0];
            }
            //push all the tasks whose enqueueTime <=currTime into the heap
            while(taskIndex<tasks.length && currTime >= sortedTasks[taskIndex][0]){
                nextTask.add(sortedTasks[taskIndex]);
                ++taskIndex;
            }
            
            int processTime = nextTask.peek()[1];
            int index = nextTask.peek()[2];
            nextTask.remove();
            
            //complete this task and increment currTime
            currTime += processTime;
            tasksProcessingOrder[ansIndex++] = index;
        }
        return tasksProcessingOrder;
    }
}
