class Solution {
    public boolean wordPattern(String pattern, String s) {
        HashMap<Character, String> map = new HashMap<>();
        Set<String> set = new HashSet<>();
        String[] words = s.split(" ");
        if(words.length != pattern.length()){
            return false;
        }
        for(int i=0;i<pattern.length();i++){
            Character key = pattern.charAt(i);
            String word = words[i];
            if(map.containsKey(key)){
                if(!word.equals(map.get(key))){
                    return false;
                }
            }
            else{
                if(set.contains(word)){
                    return false;
                }
                else{
                    map.put(key, word);
                    set.add(word);
                }
            }
        }
        return true;
    }
}

// Time complexity is O(n), where n is the length of the pattern
// Space complexity is O(n) where n is the no of words in the map
Note
Explicitly used Set instead of map.containsValue() as it requires scans of the table which is inefficient.
